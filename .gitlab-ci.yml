# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/README.html#stages
variables:
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  CI_APPLICATION_TAG: $CI_COMMIT_SHA

stages:  
  # - build
  # - test
  - deploy

# build-front:
#   # Use the official docker image.
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - docker build -f ./build/frontend.Dockerfile -t $CI_APPLICATION_REPOSITORY:front-$CI_APPLICATION_TAG -t $CI_APPLICATION_REPOSITORY:front-latest .
#     - docker push $CI_APPLICATION_REPOSITORY:front-$CI_APPLICATION_TAG
#     - docker push $CI_APPLICATION_REPOSITORY:front-latest


# build-back:
#   # Use the official docker image.
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - docker build -f ./build/backend.Dockerfile -t $CI_APPLICATION_REPOSITORY:back-$CI_APPLICATION_TAG -t $CI_APPLICATION_REPOSITORY:back-latest .
#     - docker push $CI_APPLICATION_REPOSITORY:back-$CI_APPLICATION_TAG
#     - docker push $CI_APPLICATION_REPOSITORY:back-latest
#     - echo $CI_APPLICATION_REPOSITORY:back-$CI_APPLICATION_TAG


deploy:
  # Use the official docker image.
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.6.0"
  stage: deploy
  script:
    - apk add --update coreutils
    - echo "$KUBE_CLUSTER_CERTIFICATE" | base64 --decode > cert.crt
  # backend
    - kubectl --kubeconfig="/dev/null" --server=$KUBE_SERVER_URL --token=$KUBE_TOKEN --certificate-authority=cert.crt -n birdie set image deployments/nodejs-backend backend=$CI_APPLICATION_REPOSITORY:back-$CI_APPLICATION_TAG
  # frontend
    - kubectl --kubeconfig="/dev/null" --server=$KUBE_SERVER_URL --token=$KUBE_TOKEN --certificate-authority=cert.crt -n birdie set image deployments/nodejs-frontend frontend=$CI_APPLICATION_REPOSITORY:front-$CI_APPLICATION_TAG
  only:
    refs:
      - main

